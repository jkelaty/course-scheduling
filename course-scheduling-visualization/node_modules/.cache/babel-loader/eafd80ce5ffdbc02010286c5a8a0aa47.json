{"ast":null,"code":"var _jsxFileName = \"/Users/jkelaty/Desktop/course-scheduling/course-scheduling/src/CourseScheduling/Scheduler.jsx\";\nimport React from 'react';\nimport ScheduleViewer from './ScheduleViewer/ScheduleViewer.jsx';\nimport PacmanLoad from 'react-spinners/PacmanLoader';\nexport default class Scheduler extends React.Component {\n  constructor(props) {\n    super(props);\n    this.courses_file = props.courses;\n    this.instructors_file = props.instructors;\n    this.courses = null;\n    this.instructors = null;\n    this.state = {\n      schedule: null,\n      error: false\n    };\n  }\n\n  componentDidMount() {\n    this.run_scheduler();\n  }\n\n  run_scheduler() {\n    let _this = this;\n\n    if (_this.courses_file) {\n      let courses_reader = new FileReader();\n\n      courses_reader.onload = function (e) {\n        _this.courses = courses_reader.result;\n\n        _this.received_file();\n      };\n\n      courses_reader.readAsText(_this.courses_file);\n    }\n\n    if (_this.instructors_file) {\n      let instructors_reader = new FileReader();\n\n      instructors_reader.onload = function (e) {\n        _this.instructors = instructors_reader.result;\n\n        _this.received_file();\n      };\n\n      instructors_reader.readAsText(_this.instructors_file);\n    }\n  }\n\n  received_file() {\n    if (this.courses && this.instructors) {\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          courses: this.courses,\n          preferences: this.instructors\n        })\n      };\n      fetch('https://course-scheduling-jkelaty.herokuapp.com/schedule', requestOptions).then(response => response.text()).then(job_id => {\n        this.pingScheduler(job_id.replace('rq:job:', ''));\n      }).catch(error => {\n        this.setState({\n          error: true\n        });\n      });\n    }\n  }\n\n  pingScheduler(job_id) {\n    fetch('https://course-scheduling-jkelaty.herokuapp.com/schedule/' + job_id, {\n      method: 'Get'\n    }).then(response => response.text()).then(res => {\n      console.log(job_id);\n      console.log(res);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.state.error ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cs-error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 25\n      }\n    }, \"Uh oh! Something went wrong :(\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 25\n      }\n    }, \"Reload the app and try again\")) : this.state.schedule ? /*#__PURE__*/React.createElement(ScheduleViewer, {\n      schedule: this.state.schedule,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cs-loading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(PacmanLoad, {\n      size: \"50px\",\n      color: \"white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/jkelaty/Desktop/course-scheduling/course-scheduling/src/CourseScheduling/Scheduler.jsx"],"names":["React","ScheduleViewer","PacmanLoad","Scheduler","Component","constructor","props","courses_file","courses","instructors_file","instructors","state","schedule","error","componentDidMount","run_scheduler","_this","courses_reader","FileReader","onload","e","result","received_file","readAsText","instructors_reader","requestOptions","method","headers","body","JSON","stringify","preferences","fetch","then","response","text","job_id","pingScheduler","replace","catch","setState","res","console","log","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport ScheduleViewer from './ScheduleViewer/ScheduleViewer.jsx';\nimport PacmanLoad from 'react-spinners/PacmanLoader';\n\n\nexport default class Scheduler extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.courses_file     = props.courses;\n        this.instructors_file = props.instructors;\n\n        this.courses     = null;\n        this.instructors = null;\n\n        this.state = {\n            schedule: null,\n            error: false\n        };\n    }\n\n    componentDidMount() {\n        this.run_scheduler();\n    }\n\n    run_scheduler() {\n        let _this = this;\n\n        if ( _this.courses_file ) {\n            let courses_reader = new FileReader();\n            courses_reader.onload = function(e) {\n                _this.courses = courses_reader.result;\n                _this.received_file();\n            }\n            courses_reader.readAsText( _this.courses_file );\n        }\n\n        if ( _this.instructors_file ) {\n            let instructors_reader = new FileReader();\n            instructors_reader.onload = function(e) {\n                _this.instructors = instructors_reader.result;\n                _this.received_file();\n            }\n            instructors_reader.readAsText( _this.instructors_file );\n        }\n    }\n\n    received_file() {\n        if ( this.courses && this.instructors ) {\n\n            const requestOptions = {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    courses: this.courses,\n                    preferences: this.instructors\n                })\n            };\n            \n            fetch('https://course-scheduling-jkelaty.herokuapp.com/schedule', requestOptions)\n                .then(response => response.text())\n                .then((job_id) => {\n                    this.pingScheduler(job_id.replace('rq:job:', ''));\n                })\n                .catch(error => {\n                    this.setState({\n                        error: true\n                    });\n                });\n        }\n    }\n\n    pingScheduler(job_id) {\n        fetch('https://course-scheduling-jkelaty.herokuapp.com/schedule/' + job_id, { method: 'Get' })\n            .then(response => response.text())\n            .then((res) => {\n                console.log(job_id);\n                console.log(res)\n            });\n    }\n\n    render() {\n        return (\n            <>\n                { this.state.error ?\n                \n                    <div className=\"cs-error\">\n                        <p>Uh oh! Something went wrong :(</p>\n                        <p>Reload the app and try again</p>\n                    </div>\n                \n                : this.state.schedule ?\n\n                    <ScheduleViewer schedule = {this.state.schedule} />\n\n                :\n\n                    <div className=\"cs-loading\">\n                        <PacmanLoad size='50px' color='white' />\n                    </div>\n                }\n            </>\n        );\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}